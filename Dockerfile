# Use an official Python runtime as a parent image provided by AWS for Lambda
FROM public.ecr.aws/lambda/python:3.12.11

WORKDIR /var/task

COPY requirements.txt .

RUN pip install --no-cache-dir -r requirements.txt

COPY . .

# Arguments that can be passed in during the build process from the CI/CD workflow
ARG OPENAI_API_KEY
ARG GEMINI_API_KEY
ARG CLOUDFLARE_ACCOUNT_ID
ARG D1_SQL_DATABASE_ID
ARG D1_SQL_DATABASE_NAME
ARG CLOUDFLARE_API_TOKEN
ARG AWS_ACCESS_KEY_ID
ARG AWS_SECRET_ACCESS_KEY
ARG AWS_DEFAULT_REGION
ARG S3_BUCKET_NAME
ARG POSTGRES_DB_NAME
ARG POSTGRES_USER
ARG POSTGRES_PASSWORD
ARG POSTGRES_HOST
ARG POSTGRES_PORT
ARG POSTGRES_TABLE_NAME

ENV OPENAI_API_KEY=${OPENAI_API_KEY}
ENV GEMINI_API_KEY=${GEMINI_API_KEY}
ENV CLOUDFLARE_ACCOUNT_ID=${CLOUDFLARE_ACCOUNT_ID}
ENV D1_SQL_DATABASE_ID=${D1_SQL_DATABASE_ID}
ENV D1_SQL_DATABASE_NAME=${D1_SQL_DATABASE_NAME}
ENV CLOUDFLARE_API_TOKEN=${CLOUDFLARE_API_TOKEN}
ENV AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
ENV AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
ENV AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
ENV S3_BUCKET_NAME=${S3_BUCKET_NAME}
ENV POSTGRES_DB_NAME=${POSTGRES_DB_NAME}
ENV POSTGRES_USER=${POSTGRES_USER}
ENV POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
ENV POSTGRES_HOST=${POSTGRES_HOST}
ENV POSTGRES_PORT=${POSTGRES_PORT}
ENV POSTGRES_TABLE_NAME=${POSTGRES_TABLE_NAME}

CMD [ "app.app" ]